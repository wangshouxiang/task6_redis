<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
     <!-- 引入jdbc配置文件 -->  
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
               <value>classpath:properties/jdbc.properties</value>
               <value>classpath:properties/memcache.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>
    <!-- 配置memcache -->
    <!-- <import resource="classpath:memcache/memcached-content.xml"/> -->
    <bean id="memCachedPool" class="com.danga.MemCached.SockIOPool"   
		factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<constructor-arg>  
            <value>memCachedPool</value>  
        </constructor-arg> 
		<property name="servers">  
			<list>  
				<value>${memcache.server}</value>  
			</list>  
		</property>  
		<property name="initConn">  
			<value>${memcache.initConn}</value>  
		</property>  
		<property name="minConn">  
			<value>${memcache.minConn}</value>  
		</property>  
		<property name="maxConn">  
			<value>${memcache.maxConn}</value>  
		</property>  
		<property name="maintSleep">  
			<value>${memcache.maintSleep}</value>  
		</property>  
		<property name="nagle">  
			<value>${memcache.nagle}</value>  
		</property>  
		<property name="socketTO">  
			<value>${memcache.socketTO}</value>  
		</property>  
	</bean>
    
    <bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg>
			<value>memCachedPool</value>
		</constructor-arg>
    </bean>
    
    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       <!-- 使用properties来配置 -->
        <property name="driverClassName">
            <value>${jdbc_driverClassName}</value>
        </property>
        <property name="url">
            <value>${jdbc_url}</value>
        </property>
        <property name="username">
            <value>${jdbc_username}</value>
        </property>
        <property name="password">
            <value>${jdbc_password}</value>
        </property>
    </bean>
    
    
     <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wangsx.task4_Tiles.dao" />
    </bean> 
    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 自动扫描注解的bean -->
    <context:component-scan base-package="com.wangsx.task4_Tiles.service" />
 
</beans>